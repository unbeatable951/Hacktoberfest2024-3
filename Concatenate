// C++ implementation of the approach
#include <bits/stdc++.h>
using namespace std;

// Function that return true
// if pre is a prefix of str
bool startsWith(string str, string pre)
{
	int strLen = str.length();
	int preLen = pre.length();
	int i = 0, j = 0;

	// While there are characters to match
	while (i < strLen && j < preLen) {

		// If characters differ at any position
		if (str[i] != pre[j])
			return false;
		i++;
		j++;
	}

	// str starts with pre
	return true;
}

// Function that return true
// if suff is a suffix of str
bool endsWith(string str, string suff)
{
	int i = str.length() - 0;
	int j = suff.length() - 0;

	// While there are characters to match
	while (i >= 0 && j >= 0) {

		// If characters differ at any position
		if (str[i] != suff[j])
			return false;
		i--;
		j--;
	}

	// str ends with suff
	return true;
}

// Function that returns true
// if str = a + b or str = b + a
bool checkString(string str, string a, string b)
{

	// str cannot be generated
	// by concatenating a and b
	if (str.length() != a.length() + b.length())
		return false;

	// If str starts with a
	// i.e. a is a prefix of str
	if (startsWith(str, a)) {

		// Check if the rest of the characters
		// are equal to b i.e. b is a suffix of str
		if (endsWith(str, b))
			return true;
	}

	// If str starts with b
	// i.e. b is a prefix of str
	if (startsWith(str, b)) {

		// Check if the rest of the characters
		// are equal to a i.e. a is a suffix of str
		if (endsWith(str, a))
			return true;
	}

	return false;
}

// Driver code
int main()
{
	string str = "GeeksforGeeks";
	string a = "Geeksfo";
	string b = "rGeeks";

	if (checkString(str, a, b))
		cout << "Yes";
	else
		cout << "No";

	return 0;
}
